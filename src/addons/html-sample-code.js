import { ArgumentError } from './services/errors';
import userMessages from '../user-messages';

function getStorySampleCode(story, containerClass) {
  if (typeof story !== 'string' && !(story instanceof HTMLElement)) {
    throw new ArgumentError('story', 'string \\ Html element', typeof story);
  }

  if (!containerClass) {
    return getHtml(story);
  }

  let tempStory = story;
  if (isStoryString(story)) {
    tempStory = document.createElement('div');
    /**
     * Security comment:
     * Using innerHTML is integral to the operation of this function.
     * This code injects the story which the developer provided, which resides on the local development machine.
     * Posting this to InVision DSM is only possible by using a secret token generated by the DSM server.
     * */
    tempStory.innerHTML = story;
  }

  const containers = tempStory.getElementsByClassName(containerClass);
  if (containers.length !== 1) {
    return containers.length === 0
      ? userMessages.containerClassNotFound(containerClass)
      : userMessages.multipleContainerClassesFound(containerClass);
  }

  // get the container inner html to show as sample code
  return formatHTML(containers[0].innerHTML);
}

function getHtml(story) {
  if (isStoryString(story)) {
    return story;
  }

  // the story is a DOM element so we return the entire html as string
  return formatHTML(story.outerHTML);
}

function isStoryString(story) {
  return typeof story === 'string';
}

// boolean attributes white-list
const BOOLEAN_ATTRIBUTES = 'disabled|checked|readonly|required|selected|multiple|ismap';
// DOM elements inner\outer html string is transforming boolean attributes to be with empty values
// like 'disabled=""' instead of 'disabled' (which has the same meaning for boolean attributes).
// we want to remove the empty values so the sample code will look better
function formatHTML(sampleCode) {
  return sampleCode.replace(RegExp(`(${BOOLEAN_ATTRIBUTES})=""`, 'gi'), '$1');
}

export { getStorySampleCode };
